def findWays(m, n, N, i, j):
    # Initialize a DP array where dp[step][i][j] represents the number of ways
    # to reach (i, j) in 'step' moves
    dp = [[[0] * n for _ in range(m)] for _ in range(N+1)]
    
    # Base case: The ball starts at (i, j) at 0 steps
    dp[0][i][j] = 1
    
    # Directions the ball can move: up, down, left, right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    # Fill the DP table
    for step in range(1, N+1):
        for x in range(m):
            for y in range(n):
                for dx, dy in directions:
                    prev_x, prev_y = x + dx, y + dy
                    if 0 <= prev_x < m and 0 <= prev_y < n:
                        dp[step][x][y] += dp[step-1][prev_x][prev_y]
    
    # Count the number of ways the ball can go out of bounds
    result = 0
    for step in range(1, N+1):
        # Add ways to move out of bounds
        # Out of bounds happens if the ball goes beyond the grid's edge
        for x in range(m):
            for y in range(n):
                if x < 0 or y < 0 or x >= m or y >= n:
                    result += dp[step][x][y]
    return result


# Test cases
m1, n1, N1, i1, j1 = 2, 2, 2, 0, 0
print("Test Case 1 Output:", findWays(m1, n1, N1, i1, j1))  # Expected Output: 6

m2, n2, N2, i2, j2 = 1, 3, 3, 0, 1
print("Test Case 2 Output:", findWays(m2, n2, N2, i2, j2))  # Expected Output: 12
