import sys

def floyd_warshall(n, edges):
    # Initialize distance matrix with infinity
    inf = sys.maxsize
    dist = [[inf] * n for _ in range(n)]

    # Set the distance from each node to itself as 0
    for i in range(n):
        dist[i][i] = 0

    # Set initial distances based on input edges
    for u, v, w in edges:
        dist[u][v] = w

    print("Initial Distance Matrix:")
    for row in dist:
        print(row)

    # Floyd-Warshall Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] < inf and dist[k][j] < inf:
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    print("\nFinal Distance Matrix after Floyd-Warshall:")
    for row in dist:
        print(row)

    return dist

# Test case a:
print("\nTest Case (a):")
edges_a = [
    (0, 1, 3), (0, 2, 8), (0, 3, -4),
    (1, 3, 1), (1, 2, 4), 
    (2, 0, 2), 
    (3, 2, -5), (3, 1, 6)
]
dist_a = floyd_warshall(4, edges_a)
print(f"\nShortest path from City 1 to City 3: {dist_a[0][2]}")  # Adjusting index for 0-based

# Test case b:
print("\nTest Case (b):")
edges_b = [
    (0, 1, 1), (0, 2, 5),
    (1, 2, 2), (1, 3, 1),
    (2, 4, 3),
    (3, 4, 1), (3, 5, 6),
    (4, 5, 2)
]
dist_b = floyd_warshall(6, edges_b)
