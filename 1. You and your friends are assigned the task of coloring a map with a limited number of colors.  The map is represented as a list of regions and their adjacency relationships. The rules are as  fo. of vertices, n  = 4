def graph_coloring(n, edges):
    # Step 1: Create adjacency list from edges
    adj_list = {i: [] for i in range(n)}
    for u, v in edges:
        adj_list[u].append(v)
        adj_list[v].append(u)
    
    # Step 2: Initialize colors array with -1 (uncolored)
    colors = [-1] * n
    
    # Step 3: Greedily color the graph
    def greedy_coloring():
        # For each vertex, find the first available color
        for vertex in range(n):
            # Check colors of neighbors to avoid conflicts
            neighbor_colors = set()
            for neighbor in adj_list[vertex]:
                if colors[neighbor] != -1:
                    neighbor_colors.add(colors[neighbor])
            
            # Find the first color not used by the neighbors
            color = 0
            while color in neighbor_colors:
                color += 1
            colors[vertex] = color

    # Apply greedy coloring
    greedy_coloring()
    
    # Step 4: Find the number of colors used
    num_colors = len(set(colors))
    
    # Step 5: Calculate maximum number of regions you can color
    # In a round-robin fashion (You first, Alice second, Bob third)
    your_turn = 0  # First color you would get
    alice_turn = 1  # Second color Alice would get
    bob_turn = 2    # Third color Bob would get

    # Count how many times each color is used
    color_counts = [0] * num_colors
    for color in colors:
        color_counts[color] += 1
    
    # Maximize your color count
    your_count = 0
    for i in range(num_colors):
        if i % 3 == your_turn:
            your_count += color_counts[i]
    
    return your_count

# Test Case 1: n = 4, edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
print(graph_coloring(n, edges))  # Output: The maximum number of regions you can color
