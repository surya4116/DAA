def permute(nums):
    result = []

    # Backtracking function to generate permutations
    def backtrack(start):
        # If we've considered all elements, add the current permutation
        if start == len(nums):
            result.append(nums[:])  # Make a copy of the current permutation
            return
        
        for i in range(start, len(nums)):
            # Swap the current element with the start element
            nums[start], nums[i] = nums[i], nums[start]
            # Recurse to generate permutations with the current element fixed at start
            backtrack(start + 1)
            # Backtrack: undo the swap
            nums[start], nums[i] = nums[i], nums[start]
    
    # Start the backtracking from the first element
    backtrack(0)
    
    return result

# Test the function with the provided example
nums = [1, 2, 3]
output = permute(nums)
print(output)
